// package main contains a Response to Stack Overflow question 71677581
//
// Stack Overflow Post: https://stackoverflow.com/q/71677581
//
// Go Playground version: https://go.dev/play/p/jR5MpX-Fopc
//
// This repo: https://github.com/skeptycal/71677581
//
// Copyright (c) 2022 Michael Treanor
//
// MIT License
//
// GitHub: https://github.com/skeptycal
//
// Twitter: https://twitter.com/skeptycal
package main

import (
	"fmt"

	"github.com/skeptycal/goutil/generic/generic"
)

type (
	IExampleAny = generic.IExample[any]
	IExampleInt = generic.IExample[int]
)

func MyFuncAny(ex any) any { return "stuff" }

func main() {
	// mapping maps string names to examples. The examples are instantiated with [any] and thus are filled in with interface objects that implement ExampleFunc(ex any) any
	var mapping = map[string]generic.IExample[any]{
		"any1": anything{any: "stuff"},
		"any2": anything{any: "other stuff"},
	}

	mapping["any3"] = anything{any: "more different stuff"}

	generic.PrintExample(generic.MyFuncAny("stuff"))

	fmt.Println("Output of map of type map[string]IExample[any]:")
	for k, v := range mapping {
		fmt.Printf("%v: %v\n", k, v)
	}
	// Example[T any] func(ex T) T
	fmt.Println("Output of map of type map[string]IExample[any]:")
	Mapping2 := generic.Mapping2

	for k, v := range Mapping2 {
		fmt.Printf("%v: %v\n", k, v(nil))
	}

	var mapping2 = generic.ExampleMap[any]{
		"any": MyFuncAny,
		// "int": myFuncInt, // compile time error: IncompatibleAssign

		// cannot use myFuncInt (value of type func(ex int) int)
		// as func(ex any) any value in map literal
	}

	fmt.Println()
	fmt.Println(mapping)
	fmt.Println(mapping2)
	fmt.Println(Mapping2)
}

type (
	anything struct {
		any
	}
	intthing struct {
		int
	}
	float64thing struct {
		float64
	}
)

func (t anything) ExampleFunc(ex any) any             { return t.any }
func (t intthing) ExampleFunc(ex int) int             { return t.int }
func (t float64thing) ExampleFunc(ex float64) float64 { return t.float64 }
